/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Movie {
  budget: number;
  createdAt: Generated<Timestamp | null>;
  description: string;
  duration: number;
  genres: string[];
  id: Generated<string>;
  images: string[];
  isPublic: Generated<boolean>;
  language: string;
  profit: number;
  rating: number;
  releaseDate: Timestamp;
  revenue: number;
  title: string;
  trailer: string;
  updatedAt: Generated<Timestamp | null>;
  userId: string;
}

export interface OutboxMessage {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  message: Json;
  publishedAt: Timestamp | null;
  retryCount: Generated<number>;
  runAfter: Generated<Timestamp>;
  to: string;
  type: string;
}

export interface User {
  createdAt: Generated<Timestamp>;
  email: string;
  id: Generated<string>;
  isActive: Generated<boolean>;
  name: string;
  password: string;
  updateAt: Generated<Timestamp>;
}

export interface DB {
  movie: Movie;
  outboxMessage: OutboxMessage;
  user: User;
}
